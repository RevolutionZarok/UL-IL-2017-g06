package icrash.environment.operations.actAdministrator.outactAdministrator.oegetstatisticCrises {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar

import icrash.environment
	
	import icrash.concepts.primarytypes.classes
	import icrash.environment
	import icrash.concepts.primarytypes.datatypes
	import icrash.concepts.secondarytypes.datatypes
	
	//SAM Time statistic for the operation oegetstatisticCrises
	Operation Model {

		operation: icrash.environment.actAdministrator.outactAdministrator.oegetstatisticCrises(statisticCrises:dtgetStatisticCrisisinTime):ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)
preP {
	let TheSystem : ctState in 
	let TheActor : actAdministrator in 
	let TheSystemToGetTheStatistic : actSystem in 
	self. rnActor . rnSystem = TheSystem 
	and self. rnActor = TheActor
		/* PreP01 */
		and TheSystem.vpStarted = true
		/* PreP02 */
		and TheActor.rnctAuthenticated . vpIsLogged = true
		/* PreP02 */
		and TheSystem.oegetStatistic() = true

}
 /*Pre Functional*/
preF { 
	true
} 
/*Post Functional*/
postF {
	let TheSystem: ctState in
    let TheActor:actAdministrator in
    let TheSystemToGetTheStatistic : actSystem in
	self.rnActor.rnSystem = TheSystem
    and self.rnActor = TheActor
    /*PostF01*/
    and TheSystemToGetTheStatistic.getstatisticCrises()
    /*PostF02*/
   	and TheSystemToGetTheStatistic.ctgetStatistic.statisticCrises()
    
} 
/*Post Protocol*/
postP { 
	let TheSystem: ctState in
    let TheActor:actAdministrator in
    let TheSystemToGetTheStatistic : actSystem in
	self.rnActor.rnSystem = TheSystem
    and self.rnActor = TheActor
    
    /* PostP01  */
     and TheSystemToGetTheStatistic.oesendStatistic()
     /* PostP02 */
 	//TODO?
	// open the database and take the information and send it back to the table(GUI) 
} 
		}
	}
}
